name: Deploy to GitHub Pages

on:
  # Trigger deployment on push to main branch
  push:
    branches: [main]

  # Allow manual trigger from Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run type checking
        run: yarn type-check

      - name: Run linting (if available)
        run: yarn lint || echo "No lint script found, skipping..."
        continue-on-error: true

      - name: Build application
        run: yarn build
        env:
          # Public environment variables (safe to expose)
          VITE_APP_NAME: "COVID-19 Dashboard"
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
          # API endpoints are public and safe to expose
          VITE_API_BASE_URL: "https://disease.sh/v3/covid-19"
          VITE_API_TIMEOUT: "5000"
          # Feature flags (public configuration)
          VITE_ENABLE_MOCK_DATA: "true"
          VITE_ENABLE_ANALYTICS: "false"

      - name: Setup Pages
        if: matrix.node-version == '20.x'
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: matrix.node-version == '20.x'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Security and quality checks
  security-audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: yarn audit --level high
        continue-on-error: true

      - name: Check for vulnerable dependencies
        run: |
          echo "Checking for known vulnerabilities..."
          yarn dlx audit-ci --config ./audit-ci.json || echo "No audit-ci config found, using default settings"
        continue-on-error: true

  # Performance and bundle analysis
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build and analyze bundle
        run: |
          yarn build
          echo "Build completed successfully"

          # Check dist folder size
          echo "Analyzing build output..."
          du -sh dist/
          find dist/ -name "*.js" -exec ls -lah {} \; | head -10

          # Check for large files
          echo "Checking for large files (>500KB)..."
          find dist/ -size +500k -type f || echo "No large files found"

      - name: Comment bundle size
        if: github.event_name == 'pull_request'
        run: |
          BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          # In a real scenario, you could post this as a PR comment
